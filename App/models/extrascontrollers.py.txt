from App.database import db
class Book(db.Model):
  id = db.Column(db.Integer, primary_key=True)
  name = db.Column(db.String(255), nullable=False)
  author = db.Column(db.String(255),nullable=False)
  cover = db.Column(db.String(255),nullable=False)
  publisher = db.Column(db.String(255),nullable=False)
  reviews_count = db.Column(db.Integer, default=0)

  reviews = db.relationship('Review', backref='book', lazy=True)
  
  def __init__(self, name, author, publisher, cover):
    self.name = name
    self.author = author
    self.publisher = publisher
    self.cover = cover
    self.reviews_count=0
    
  def __repr__(self):
      return f'<Book {self.id} : {self.name} author {self.author} publisher {self.publisher}>'
    
  def get_json(self):
    return {
      'id': self.id,
      'name': self.name,
      'author': self.author,
      'publisher': self.publisher,
      'cover' : self.cover,
      'reviews_count': self.reviews_count,
  }
  from flask import jsonify
from App.models import Review
from App.database import db


def create_review(user_id, book_id, rating, reviewtext):
    from App.models import User
    exist=Review.query.filter_by(user_id=user_id, book_id=book_id).all()
    if not exist:
        review = Review(user_id=user_id, book_id=book_id, rating=rating, reviewtext=reviewtext)
        db.session.add(review)
        db.session.commit()
        return review
    return exist

def update_review(user_id,book_id,rating, reviewtext):
    exist=Review.query.filter_by(user_id=user_id, book_id=book_id).all()
    if exist:
        exist.setRating(rating)
        exist.setReviewText(reviewtext)
        db.session.add(exist)
        db.session.commit()
        return exist
    return None
def get_review(id):
    return Review.query.get(id) #Review.query.filter_by(id=id).first()

def get_all_reviews():
    return Review.query.all()

def get_all_reviews_json():
    reviews = Review.query.all()
    if not reviews:
        return []
    reviews = [review.get_json() for review in reviews]
    return reviews

def get_book_reviews(book_id):
    return Review.query.filter_by(book_id=book_id).all()#Review.book.has(Book.name == book_name

def get_user_reviews(user_id):
    return Review.query.filter_by(user_id=user_id).all()

"""def update_user(id, username):
    user = get_user(id)
    if user:
        user.username = username
        db.session.add(user)
        return db.session.commit()
    return None
    """
    import csv
from App.models import Book
from App.database import db
from flask import jsonify
def create_book( name, author, publisher,cover):
    newbook = Book(name=name, author=author, publisher=publisher,cover=cover)
    db.session.add(newbook)
    db.session.commit()
    return newbook

    """if row['height_m'] == '':
                row['height_m'] = None
            if row['weight_kg'] == '':
                row['weight_kg'] = None
            if row['type2'] == '':
                row['type2'] = None

def loadBooks():
    with open('books.csv', newline='', encoding='utf8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
           

            book = Book(name=row['name'], author=row['author'], publisher=row['publisher'],cover=row['cover'])
            db.session.add(book) 
        db.session.commit()
"""
def get_book_by_name(name):
    return Book.query.filter_by(name=name).first()

def get_book(id):
    return Book.query.get(id)

def get_all_books():
    return Book.query.all()

def get_all_books_json():
    books = Book.query.all()
    if not books:
        return []
    books = [book.get_json() for book in books]
    return books
def get_complete_books_data():
    data=[]
    books = Book.query.all()
    for book in books:
        total_rating = sum([review.rating for review in book.reviews])
        average_rating = total_rating / len(book.reviews)
        data.append({
            'id': book.id,
            'name': book.name,
            'author': book.author,
            'publisher': book.publisher,
            'cover':book.cover,
            'average_rating': average_rating,
            'reviews_count': len(book.reviews)
        })
    return jsonify(data)
         
"""def update_user(id, username):
    user = get_user(id)
    if user:
        user.username = username
        db.session.add(user)
        return db.session.commit()
    return None
    """
    
    